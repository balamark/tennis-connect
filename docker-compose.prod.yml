services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: tennis-connect-db
    environment:
      POSTGRES_DB: tennis_connect
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - tennis-connect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tennis-connect-backend
    environment:
      - APP_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=tennis_connect
      - DB_SSLMODE=require
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=30
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tennis-connect-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # Use production stage
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080/api}
        - REACT_APP_ENV=production
    container_name: tennis-connect-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - tennis-connect-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  tennis-connect-network:
    driver: bridge 